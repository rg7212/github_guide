knitr::opts_chunk$set(echo = TRUE)
install.packages("detector")
library(dplyr, warn.conflicts = FALSE)
library(generator)
install.packages("generator")
library(dplyr, warn.conflicts = FALSE)
library(generator)
n <- 6
ashley_madison <-
data.frame(name = r_full_names(n),
email = r_email_addresses(n),
phone_number = r_phone_numbers(n, use_hyphens = TRUE,
use_spaces = TRUE),
stringsAsFactors = FALSE)
ashley_madison %>%
knitr::kable(format = "markdown")
#Detect data containing PII
library(detector)
ashley_madison %>%
detect %>%
knitr::kable(format = "markdown")
#Detect data containing PII
library(detector)
ashley_madison %>%
detect %>%
knitr::kable(format = "markdown")
library(dplyr, warn.conflicts = FALSE)
library(generator)
n <- 6
ashley_madison <-
data.frame(name = r_full_names(n),
email = r_email_addresses(n),
phone_number = r_phone_numbers(n, use_hyphens = TRUE,
use_spaces = TRUE),
stringsAsFactors = FALSE)
ashley_madison %>%
knitr::kable(format = "markdown")
#Detect data containing PII
library(detector)
ashley_madison %>%
detect %>%
knitr::kable(format = "markdown")
load("~/DATA 412_612/Lectures_All/01_Intro_to_412_612_R/01a_data_science_and_r.Rmd")
1
knitr::opts_chunk$set(echo = FALSE)
install.packages("emo")
install.packages("emo")
library("emo")
tinytex::install_tinytex()
install.packages("roxygen2")
my_first_variable <- "Hello World"
x <- 5
x <- 2*4
x
knitr::opts_chunk$set(echo = params$solutions, eval = params$solutions)
knitr::opts_chunk$set(echo = TRUE)
"Question 5:"
# I used the c function to combine var1 and vec2
combo <- c(var1, vec2)
"Question 1:"
#nums is a list of numbers from 65 to 250, then var is the variable of the vector of those numbers that are divisible by 5
nums <- 65:250
var1 <- (nums[nums%%5==0])
"the vector is:"
var1
#The sum of the elements of this vector is sum
sum1 <- sum(var1)
"the sum is"
sum1
#The mean of the elements of this vector is mean
mean1 <- mean(var1)
"the mean is"
mean1
"Question 2:"
#I set vec equal to the sequence the satisfies question 2
vec2 <- seq(from = 64, to = 250, by = 1.85)
"the vector is:"
vec2
#The sum of the elements of this vector is sum
sumvec2 <- sum(vec2)
"the sum is"
sumvec2
#The standard deviation of the elements of this vector is sd
sdvec2 <- sd(vec2)
"the standard deviation is"
sdvec2
"Question 3:"
#Print the 11th element of the vector in part 1
"The 11th element from var 1 is:"
var1[11]
"Question 5:"
#I used the c function to combine var1 and vec2
combo <- c(var1, vec2)
"The combined vectors is:"
combo
"Question 5:"
#I used the c function to combine var1 and vec2
combo <- c(var1, vec2)
"The combined vectors is:"
combo
"Question 3:"
#Print the 11th element of the vector in part 1
"The 11th element from var 1 is:"
var1[11]
"Question 1:"
#nums is a list of numbers from 65 to 250, then var is the variable of the vector of those numbers that are divisible by 5
nums <- 65:250
var1 <- (nums[nums%%5==0])
"the vector is:"
var1
#The sum of the elements of this vector is sum
sum1 <- sum(var1)
"the sum is"
sum1
#The mean of the elements of this vector is mean
mean1 <- mean(var1)
"the mean is"
mean1
"Question 2:"
#I set vec equal to the sequence the satisfies question 2
vec2 <- seq(from = 64, to = 250, by = 1.85)
"the vector is:"
vec2
#The sum of the elements of this vector is sum
sumvec2 <- sum(vec2)
"the sum is"
sumvec2
#The standard deviation of the elements of this vector is sd
sdvec2 <- sd(vec2)
"the standard deviation is"
sdvec2
"Question 3:"
#Print the 11th element of the vector in part 1
"The 11th element from var 1 is:"
var1[11]
"Question 5:"
#I used the c function to combine var1 and vec2
combo <- c(var1, vec2)
"The combined vectors is:"
combo
"Question 5:"
# I used the c function to combine var1 and vec2
combo <- c(var1, vec2)
"The combined vectors is:"
combo
knitr::opts_chunk$set(echo = params$solutions, eval = params$solutions)
knitr::opts_chunk$set(echo       = params$solutions, eval = params$solutions,
fig.height = 3,
fig.width  = 6,
fig.align  = "center")
klippy::klippy()
install.packages("loadspace")
library("loadspace")
install.packages("loadNamespace")
klippy::klippy()
knitr::opts_chunk$set(echo       = params$solutions, eval = params$solutions,
fig.height = 3,
fig.width  = 6,
fig.align  = "center")
knitr::opts_chunk$set(echo       = params$solutions, eval = params$solutions,
fig.height = 3,
fig.width  = 6,
fig.align  = "center")
source("./R/small_x.R")
small_x(c(0, 0.2, 0.4, 0.7))
```
mean(c(2,3,4,5))
df %>%
summarize(max = max(x))
library(("tidveryse"))
library(("tidyverse"))
install.packages("tidyverse")
library("tidyverse")
df <- tibble(x = c(2,3,4,5), y = c(5,6,7,9))
df %>%
summarize(max = max(x))
df <- tibble(x = c(2,3,4,5), y = c(5,6,7,9))
df %>%
summarize(max = max(x))
cat(readr::read_file("./R/geo_mean.R")) # print out the function
source("./R/geo_mean.R")
library(magrittr) # to load the pipe operator
geo_mean(c(1, 6, 2, 5))
source("./R/small_x.R")
small_x(c(0, 0.2, 0.4, 0.7))
cat(readr::read_file("./R/small_x.R")) # print out the function
mean(c(2,3,4,5))
mean(c(2,3,4,5))
mean(c(2,3,4,5))
df <- tibble(x = c(2,3,4,5), y = c(5,6,7,9))
df %>%
summarize(max = max(x))
library("tidyverse")
df <- tibble(x = c(2,3,4,5), y = c(5,6,7,9))
df %>%
summarize(max = max(x))
#' Calculate the geometric mean
#' Uses log(), mean() and exp() to calculate a geometric mean
#' of a vector of numerics.
#'
#' Usage
#' `geo_mean(x)`
#'
#' @param x A vector of positive numerics
#'
#' @return The geometric mean of x
#' @export
#' @import magrittr
#' @examples
geo_mean <- function(x) {
stopifnot(is.numeric(x))
x %>%
log() %>%
mean() %>%
exp()
}
source("./R/geo_mean.R")
library(magrittr) # to load the pipe operator
geo_mean(c(1, 6, 2, 5))
small_x <- function(x) {
y <- (x >= 0.1 & x <= 0.5)
return(y)
}
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
data("flights")
library(tidyverse)
library(nycflights13)
data("flights")
library(nycflights13)
data("flights")
head(flights)
tail(flights)
nrow(flights)
ncol(flights)
sqrt(2) ^ 2
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.width = 6,
fig.align = "center"
)
read_lines(file = "../data/hate_crimes2.csv", n_max = 10)
library(tidyverse)
data("mpg")
read_lines(file = "../data/hate_crimes2.csv", n_max = 10)
hate_crimes <- read_csv(file = "../data/hate_crimes2.csv")
hate_crimes <-
read_csv(file = "https://dcgerard.github.io/stat_412_612/data/hate_crimes2.csv")
# for "smaller" data sets
# view(hate_crimes) # in the console
# for overall structure
str(hate_crimes)
nrow(hate_crimes)
ncol(hate_crimes)
# for first and last rows
head(hate_crimes, n = 10)
tail(hate_crimes, n = 10)
# Count the number of NAs
hate_crimes %>%
summarise(across(everything(), ~ sum(is.na(.))))
# Check for duplicate rows
hate_crimes %>%
summarize(dist = nrow(distinct(.)))
nrow(hate_crimes)
# if a variable is character and should be numeric check the values
head(sort(unique(hate_crimes$share_non_citizen)))
tail(sort(unique(hate_crimes$share_non_citizen)))
hate_crimes_a <- read_csv("../data/hate_crimes_1a.csv")
hate_crimes_a %>%
filter(str_detect(share_non_citizen, "missing"))
hate_crimes_a <- read_csv("../data/hate_crimes_1a.csv", na = "missing")
hate_crimes_a %>%
filter(str_detect(share_non_citizen, "missing"))
